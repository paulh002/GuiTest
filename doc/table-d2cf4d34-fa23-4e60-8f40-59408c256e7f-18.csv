Layer,Component,Role,How It’s Used
App Layer,WaylandWindow class,Main logic container,"Holds two window structs, color state, event loop"
,windows[2] struct array,Per-window state,Each has: surface", "xdg_surface", "xdg_toplevel", "buffer", "output", "color
,COLORS[][2],Color palette,4 pairs of RGB values; cycles every 3s
,update_colors(),State machine,Increments index → updates both window colors
,create_buffer(),Buffer generator,Uses memfd_create() + mmap() to create shared memory buffer filled with color
,run(),Event loop,Uses poll() + wl_display_dispatch() for timeout + event handling
Client Lib Layer,wl_display,Connection to compositor,Created via wl_display_connect()
,wl_registry,Global object discoverer,Binds wl_compositor", "xdg_wm_base", "wl_shm", "wl_output
,wl_shm,Shared memory manager,Creates pool from memfd → creates wl_buffer
,xdg_wm_base,Window manager interface,Creates xdg_surface → xdg_toplevel
,wl_output,Monitor descriptor,"Provides geometry, name, scale — used to assign window to monitor"
,wl_surface,Pixel container,"Attached to buffer, committed to trigger redraw"
,xdg_toplevel,Window semantics,"Handles title, maximize, fullscreen, close"
,wl_buffer,Pixel data carrier,Contains 800×600 pixels in XRGB8888 format
Compositor Layer,Sway / GNOME / Weston,Display server,"Receives commits, renders surfaces on correct output, sends configure events"
Hardware Layer,Two physical monitors,GPU + display hardware,Connected via HDMI/DP; detected by compositor as wl_output